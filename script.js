const emojis = ["ü§¢","ü§¢","üòé","üòé","üò≠","üò≠","ü§•","ü§•","üòµ","üòµ","üò®","üò®","üò°","üò°","üòá","üòá","üòã","üòã","üòà","üòà"];
let shuf_emojis = emojis.sort(() => (Math.random() > 0.5) ? 2 : -1);
let pairsFound = 0; // Variable pour suivre le nombre de paires trouv√©es
let isProcessing = false; // Variable pour suivre l'√©tat de l'animation

for (var i = 0; i < emojis.length; i++) {
    let box = document.createElement('div');
    box.className = 'item';
    box.innerHTML = shuf_emojis[i];

    document.querySelector('.game').appendChild(box);
    box.onclick = function () {
        if (isProcessing) return; // Sortir de la fonction si une animation est en cours
        if (this.classList.contains('boxOpen')) return; // Sortir si la carte est d√©j√† retourn√©e

        this.classList.add('boxOpen');
        if (document.querySelectorAll('.boxOpen').length > 1) {
            isProcessing = true; // D√©finir l'√©tat en cours d'animation

            setTimeout(function () {
                if (document.querySelectorAll('.boxOpen')[0].innerHTML === document.querySelectorAll('.boxOpen')[1].innerHTML) {
                    document.querySelectorAll('.boxOpen')[0].classList.add('boxMatch');
                    document.querySelectorAll('.boxOpen')[1].classList.add('boxMatch');

                    document.querySelectorAll('.boxOpen')[1].classList.remove('boxOpen');
                    document.querySelectorAll('.boxOpen')[0].classList.remove('boxOpen');

                    pairsFound += 1; // Incr√©mente le nombre de paires trouv√©es

                    if (pairsFound === emojis.length / 2) { // V√©rifie si toutes les paires ont √©t√© trouv√©es
                        const victoryMessage = document.querySelector('.victory');
                        victoryMessage.innerText = "üéâ Bravo ! C'est gagn√© üéâ"; // Affiche le message de victoire
                        victoryMessage.classList.add('scale'); // Ajoute la classe pour l'animation de mise √† l'√©chelle

                        setTimeout(() => {
                            victoryMessage.classList.remove('scale'); // Retire la classe apr√®s l'animation
                        }, 4000); // Temps de l'animation
                    }
                } else {
                    document.querySelectorAll('.boxOpen')[1].classList.remove('boxOpen');
                    document.querySelectorAll('.boxOpen')[0].classList.remove('boxOpen');
                }
                isProcessing = false; // Met fin √† l'animation en cours
            }, 900);
        }
    };
    document.querySelector('.game').appendChild(box);
};
